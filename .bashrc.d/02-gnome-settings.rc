#!/usr/bin/env bash

# Personalized Gnome settings

#- [silverblue] - make sure we aren't trying to load this in a toolbox
if ! [[ -f /run/.containerenv ]]; then
    ## Text scaling
    #- Source: https://wiki.archlinux.org/title/HiDPI#Text_Scaling 
    gsettings set org.gnome.desktop.interface text-scaling-factor 1.5

    ## Keyboard modifications
    #- Source: https://reddit.com/r/gnome/comments/bu27cu/change_caps_lock_into_a_control_key/
    gsettings set org.gnome.desktop.input-sources xkb-options '["caps:ctrl_modifier"]'

    #- Set Emacs keys
    gsettings set org.gnome.desktop.interface gtk-key-theme 'Emacs'

    #- Disable switch-to-application shortcuts
    keys=$(gsettings list-keys org.gnome.shell.keybindings | command -p grep -E '^.*[0-9]')
    for key in $keys; do
	gsettings set org.gnome.shell.keybindings $key "['']"
    done

    #- Set `switch-workspace` and `move-to-workspace` shortcuts
    for N in {1..10}; do
	if (( $N < 10 )); then
	    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-$N "['<Shift><Super>$N']"
	    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-$N "['<Super>$N']"
	else
	    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-$N "['<Shift><Super>0']"
	    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-10 "['<Super>0']"
	fi
    done

    ## Night Light
    #- Source: https://wiki.archlinux.org/title/GNOME#Night_Light
    nightlight() {
	_set-nl-property() {
	    local property value; property="$1" value="$2"	    
	    gsettings set org.gnome.settings-daemon.plugins.color "$property" "$value"
	}

	_usage() {
	    local funcname; funcname="$1"
	    echo "Usage: ${funcname} [--enabled <true|false>] [--from <0..23>] [--to <0..23>] <color-temprature>"
	}

	while [[ -n "$1" || -z "$1" ]]; do
	    case "$1" in
		--enabled)
		    shift
		    bool="$1"
		    if [[ $bool =~ true|false ]]; then
			_set-nl-property night-light-enabled "$bool"
			shift
		    else
			_usage $FUNCNAME
			break
		    fi
		    ;;
		--from|--to)
		    prep="${1/--/}"
		    shift
		    time="${1}.0"
		    if [[ $1 =~ [0-9]{1,2} ]]; then
			_set-nl-property night-light-schedule-${prep} "$time"
			shift
		    else
			_usage $FUNCNAME
			break
		    fi
		    ;;
		[0-9]*)
		    temp="$1"
		    if [[ $1 =~ [0-9]{1,5} ]]; then
			_set-nl-property night-light-temperature "$temp"
			break
		    else
			_usage $FUNCNAME
			break
		    fi
		    ;;
		*)
		    _usage $FUNCNAME
		    break
	    esac
	done

	# command line shortcut
	nl() { nightlight "$@"; }
	export -f nl
    }

    
    nightlight --enabled true --from 0 --to 0 3000

    ## Display brightness
    #- Source: https://wiki.archlinux.org/title/Backlight#Using_DBus_with_GNOME
    gnome-brightness() {
	local method_arg brightness dest_schema object_path method method_schema
	method_arg=${1/--/}
	brightness=$2
	dest_schema="org.gnome.SettingsDaemon.Power"
	object_path="/org/gnome/SettingsDaemon/Power"
	method="org.freedesktop.DBus.Properties.${method_arg@u}"
	method_schema="org.gnome.SettingsDaemon.Power.Screen"

	_usage() {
	    echo
	    echo "Sets a new display brightness, or displays the current brightness"
	    echo 	
	    echo "Usage:"
	    echo " gnome-brightness <--set|--get> [0..100]"
	    echo
	    echo "Examples:"
	    echo " gnome-brightness --get       returns current diplay brightness."
	    echo " gnome-brightness --set 25    sets display brightness to 25%."
	    echo
	    echo "Note:"
	    echo " levels < 0 and > 100 have the effect of setting the brightness to 0"
	    echo
	}

	_set-brightness() {
	    local brightness=$1
	    gdbus call \
		  --session \
		  --dest $dest_schema \
		  --object-path $object_path \
		  --method $method $method_schema Brightness "<int32 $brightness>"
	}

	_get-brightness() {
	    gdbus call \
		  --session \
		  --dest $dest_schema \
		  --object-path $object_path \
		  --method $method $method_schema Brightness | tr -d '[\(\)\<\>,]'
	}
	
	case $method_arg in
	    set)
		if [[ -z $brightness && $brightness =~ [0-9]{1,3} ]]; then
		    _usage
		elif [[ $brightness -lt 0 || $brightness -gt 100 ]]; then
		    _usage
		else		    
		    _set-brightness $brightness >/dev/null
		fi ;;
	    get)
		_get-brightness ;;	
	    *)
		_usage
	esac

	# command line shortcut
	brightness() { gnome-brightness "$@"; }
	export -f brightness
    } 

    gnome-brightness --set 25

    ## Touchpad
    #- Source: https://wiki.archlinux.org/title/GNOME#Mouse_and_touchpad
    gsettings set org.gnome.desktop.peripherals.touchpad click-method 'fingers'
    gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click 'true'

    ## Theme
    #- Source: https://wiki.archlinux.org/title/GNOME#Themes
    gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark'
    gsettings set org.gnome.desktop.interface icon-theme 'Adwaita'

    ## Wallpaper
    #- make this dependant on plugged in display
    wallpaper_uri="$HOME/Pictures/silverblue-logo.svg"
    gsettings set org.gnome.desktop.background picture-uri $wallpaper_uri

    #- idea is to switch wallpaper and scaling based on current display
    wallpaper_uri="$(gsettings get org.gnome.desktop.background picture-uri)"
    if [[ "$wallpaper_uri" =~ .*hhkb.* ]]; then 
	gsettings set org.gnome.desktop.background picture-options 'scaled'
    else
	gsettings set org.gnome.desktop.background picture-options 'centered'
    fi

    ## Screenshots
    gsettings set org.gnome.shell.keybindings screenshot "['<Super>p']"
    gsettings set org.gnome.shell.keybindings show-screenshot-ui "['<Shift><Super>p']"
    gsettings set org.gnome.shell.keybindings screenshot-window "['<Shift><Alt>p']"
    gsettings set org.gnome.shell.keybindings show-screen-recording-ui "['<Shift><Control><Alt>r']"

    ## Gnome Terminal
    set-gnome-terminal-dimensions() {
	# On startup, sets `gnome-terminal` height and width to that of the current display
	local tprofiles tkeys cols rows
	tprofiles=( $(gsettings get org.gnome.Terminal.ProfilesList list | tr -d [\[\]\']) )
	tkeys=( $(gsettings list-keys org.gnome.Terminal.Legacy.Profile:/ | command grep -iE 'columns|rows') )
	cols=$(( "$(tput cols)" + (238 - "$(tput cols)") ))
	rows=$(( "$(tput lines)" + (53 - "$(tput lines)") ))

	_set-term-property() {
	    gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:"$1"/ "$2" "$3"
	}

	# iterate over all gnome-terminal profiles
	for tprofile in "${tprofiles[@]}"; do
	    # iterate over the column and row keys
	    for tkey in "${tkeys[@]}"; do 
		if [[ $tkey =~ .*columns.* ]]; then
		    _set-term-property "$tprofile" "$tkey" "$cols"
		else
		    _set-term-property "$tprofile" "$tkey" "$rows"
		fi
	    done
	done
    }
    
    set-gnome-terminal-dimensions
fi
