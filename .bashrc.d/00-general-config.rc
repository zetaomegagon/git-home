#!/usr/bin/env bash

# --------------------------------------------------------------------------------------------------
# path
# --------------------------------------------------------------------------------------------------
PATHS=(
    projects/repositories/cloudshare
    .bin/vial
    .bin/linphone
    .bin
)

for rpath in "${PATHS[@]}"; do
    fpath="${HOME}/${rpath}"
    [[ "${PATH#*${fpath}:}" == $PATH ]] && PATH="${fpath}:$PATH"
done

# --------------------------------------------------------------------------------------------------
# shell options                    See: https://www.mankier.com/1/bash#Shell_Builtin_Commands
# --------------------------------------------------------------------------------------------------
shopt -s autocd                    # cd wihout cd
shopt -s cdable_vars               # if var expands to a dir, cd into it
shopt -s cdspell                   # cd spell checking
shopt -s checkhash                 # check hash table; then path
shopt -s checkjobs                 # check running jobs before exiting a shell
shopt -s direxpand                 # do word expansion where a directory name would exist 
shopt -s dirspell                  # correct directory names during completion
shopt -s dotglob                   # match filenames that begin with '.' during glob expansion
shopt -s extglob                   # extended pattern matching. See Pathname Expansion in Bash(1)

shopt -s globstar                  # change how globs match files and directories
                                   #   **  = match all files and 0+ directories and subdirs
                                   #   **/ = match 0+ directories and subdirs

shopt -s gnu_errfmt                # write shell error messages in GNU error message format
                                   #   see: https://www.gnu.org/prep/standards/html_node/Errors.html

shopt -s no_empty_cmd_completion   # do not attempt completion when the line is empty

# --------------------------------------------------------------------------------------------------
# history options                  See: https://www.mankier.com/1/bash#History_Expansion
#                                       https://mywiki.wooledge.org/BashFAQ/088
# --------------------------------------------------------------------------------------------------
shopt -s cmdhist                   # attempt to save multi-line commands in the same history entry
shopt -s histappend                # append new session history into .bash_history
shopt -s histreedit                # allow editing on failed history substitution
shopt -s histverify                # on history substitution allow editing before sending

# --------------------------------------------------------------------------------------------------
# history variables                See: https://www.mankier.com/1/bash#History
#                                       https://mywiki.wooledge.org/BashFAQ/088
# --------------------------------------------------------------------------------------------------
HISTIGNORE_LIST=(
    'cd *:'
    'l[alsz]:'
    'exit:'
    'history:'
    'dtach *:'
    'rm *:'
    'man *:'
    'help *:'
    '* -help:'
    '* --help:'
)
export PROMPT_COMMAND='history -a'
export HISTFILESIZE=-1
export HISTSIZE=-1
export HISTIGNORE="$(printf "%s" "${HISTIGNORE_LIST[@]}")"
export HISTCONTROL='ignoreboth'

# --------------------------------------------------------------------------------------------------
# history functions                See: https://mywiki.wooledge.org/BashFAQ/088
# --------------------------------------------------------------------------------------------------
dedupe-history() {
    local TEMPDIR="$(mktemp -d -t bash-history-XXXXXXXXXXXXXXXX)"
    awk 'NR==FNR && !/^#/{lines[$0]=FNR;next} lines[$0]==FNR' "$HISTFILE" "$HISTFILE" \
	> "${TEMPDIR}/${HISTFILE##*/}.compressed" \
	&& cp "${TEMPDIR}/${HISTFILE##*/}.compressed" "$HISTFILE" 2>&-
}

backup-history() {
    local BAKDIR="$HOME/.history"
	local DATE="$(date -uIns)"
	local NEWHIST="history-$DATE"
    [[ ! -d $BAKDIR ]] && mkdir $BAKDIR
	cp $HISTFILE "$BAKDIR/$NEWHIST"
}

# --------------------------------------------------------------------------------------------------
# deduplicate $HISTFILE and make it append only
# --------------------------------------------------------------------------------------------------
if lsattr -a $HISTFILE | grep -qE '^-+a-+.*$'; then
    backup-history
    sudo chattr -a $HISTFILE
    dedupe-history
    sudo chattr +a $HISTFILE
else
    backup-history
    dedupe-history
    sudo chattr +a $HISTFILE
fi

# --------------------------------------------------------------------------------------------------
# TODO                             Additionally limit the current $HISTFILE to the last 10,000
#                                  lines, archiving the rest of the lines into a new file.
#
#                                  Allow for the following functionality:
#                                   - fast search over all files
#                                   - optional history builtin manipulations over all files
# --------------------------------------------------------------------------------------------------
